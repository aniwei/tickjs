export enum TokenTypes {
  TOKEN_NUMBER = -128, 
  TOKEN_STRING,
  TOKEN_TEMPLATE,
  TOKEN_IDENT,
  TOKEN_REGEXP,

  /* warning: order matters (see js_parse_assign_expr) */
  TOKEN_MUL_ASSIGN,
  TOKEN_DIV_ASSIGN,
  TOKEN_MOD_ASSIGN,
  TOKEN_PLUS_ASSIGN,
  TOKEN_MINUS_ASSIGN,
  TOKEN_SHL_ASSIGN,
  TOKEN_SAR_ASSIGN,
  TOKEN_SHR_ASSIGN,
  TOKEN_AND_ASSIGN,
  TOKEN_XOR_ASSIGN,
  TOKEN_OR_ASSIGN,
// #ifdef CONFIG_BIGNUM
//  TOKEN_MATH_POW_ASSIGN,
// #endif
  TOKEN_POW_ASSIGN,
  TOKEN_LAND_ASSIGN,
  TOKEN_LOR_ASSIGN,
  TOKEN_DOUBLE_QUESTION_MARK_ASSIGN,
  TOKEN_DEC,
  TOKEN_INC,
  TOKEN_SHL,
  TOKEN_SAR,
  TOKEN_SHR,
  TOKEN_LT,
  TOKEN_LTE,
  TOKEN_GT,
  TOKEN_GTE,
  TOKEN_EQ,
  TOKEN_STRICT_EQ,
  TOKEN_NEQ,
  TOKEN_STRICT_NEQ,
  TOKEN_LAND,
  TOKEN_LOR,
// #ifdef CONFIG_BIGNUM
//  TOKEN_MATH_POW,
//#endif
  TOKEN_POW,
  TOKEN_ARROW,
  TOKEN_ELLIPSIS,
  TOKEN_DOUBLE_QUESTION_MARK,
  TOKEN_QUESTION_MARK_DOT,
  TOKEN_ERROR,
  TOKEN_PRIVATE_NAME,
  TOKEN_EOF,
  /* keywords: WARNING: same order as atoms */
  TOKEN_NULL, /* must be first */
  TOKEN_FALSE,
  TOKEN_TRUE,
  TOKEN_IF,
  TOKEN_ELSE,
  TOKEN_RETURN,
  TOKEN_VAR,
  TOKEN_THIS,
  TOKEN_DELETE,
  TOKEN_VOID,
  TOKEN_TYPEOF,
  TOKEN_NEW,
  TOKEN_IN,
  TOKEN_INSTANCEOF,
  TOKEN_DO,
  TOKEN_WHILE,
  TOKEN_FOR,
  TOKEN_BREAK,
  TOKEN_CONTINUE,
  TOKEN_SWITCH,
  TOKEN_CASE,
  TOKEN_DEFAULT,
  TOKEN_THROW,
  TOKEN_TRY,
  TOKEN_CATCH,
  TOKEN_FINALLY,
  TOKEN_FUNCTION,
  TOKEN_DEBUGGER,
  TOKEN_WITH,
  /* FutureReservedWord */
  TOKEN_CLASS, 
  TOKEN_CONST, 
  TOKEN_ENUM,  
  TOKEN_EXPORT, 
  TOKEN_EXTENDS, 
  TOKEN_IMPORT,
  TOKEN_SUPER,
  /* FutureReservedWords when parsing strict mode code */
  TOKEN_IMPLEMENTS,
  TOKEN_INTERFACE,
  TOKEN_LET,
  TOKEN_PACKAGE,
  TOKEN_PRIVATE,
  TOKEN_PROTECTED,
  TOKEN_PUBLIC,
  TOKEN_STATIC,
  TOKEN_YIELD,
  TOKEN_AWAIT, /* must be last */
  TOKEN_OF,     /* only used for js_parse_skip_parens_token() */
};

export type JSToken = {
  value: string,
  lineNumber: number
}