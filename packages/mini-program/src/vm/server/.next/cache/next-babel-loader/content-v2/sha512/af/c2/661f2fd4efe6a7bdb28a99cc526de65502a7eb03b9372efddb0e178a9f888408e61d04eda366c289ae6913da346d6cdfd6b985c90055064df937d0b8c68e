{"ast":null,"code":"import { useEffect, useMemo } from 'react';\n\nasync function scriptLoader(src) {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement('script');\n    script.type = 'module';\n    script.src = src;\n\n    script.onload = () => resolve(src);\n\n    script.onerror = error => reject(error);\n\n    script.src = src;\n    document.head.appendChild(script);\n  });\n}\n\nexport function useScript(src, deps = []) {\n  const scripts = useMemo(() => [], []);\n  scripts.push(src);\n  useEffect(() => {\n    const run = async () => {\n      let script = scripts.shift();\n      debugger;\n\n      while (script) {\n        if (typeof script === 'function') {\n          await script();\n        } else if (typeof script === 'string') {\n          await scriptLoader(script);\n        }\n\n        script = scripts.shift();\n      }\n    };\n\n    run();\n  }, deps);\n}","map":{"version":3,"sources":["/Users/aniwei/Desktop/tickjs/packages/mini-program/src/vm/server/hooks/useScript.ts"],"names":["useEffect","useMemo","scriptLoader","src","Promise","resolve","reject","script","document","createElement","type","onload","onerror","error","head","appendChild","useScript","deps","scripts","push","run","shift"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,OAAnC;;AAEA,eAAeC,YAAf,CAA6BC,GAA7B,EAAgD;AAC9C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AAEAF,IAAAA,MAAM,CAACG,IAAP,GAAc,QAAd;AACAH,IAAAA,MAAM,CAACJ,GAAP,GAAaA,GAAb;;AAEAI,IAAAA,MAAM,CAACI,MAAP,GAAgB,MAAMN,OAAO,CAACF,GAAD,CAA7B;;AACAI,IAAAA,MAAM,CAACK,OAAP,GAAkBC,KAAD,IAAWP,MAAM,CAACO,KAAD,CAAlC;;AACAN,IAAAA,MAAM,CAACJ,GAAP,GAAaA,GAAb;AAEAK,IAAAA,QAAQ,CAACM,IAAT,CAAcC,WAAd,CAA0BR,MAA1B;AACD,GAXM,CAAP;AAYD;;AAED,OAAO,SAASS,SAAT,CAAoBb,GAApB,EAA4Cc,IAAI,GAAG,EAAnD,EAAuD;AAC5D,QAAMC,OAAc,GAAGjB,OAAO,CAAC,MAAM,EAAP,EAAW,EAAX,CAA9B;AAEAiB,EAAAA,OAAO,CAACC,IAAR,CAAahB,GAAb;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,GAAG,GAAG,YAAY;AACtB,UAAIb,MAAM,GAAGW,OAAO,CAACG,KAAR,EAAb;AAEA;;AAEA,aAAOd,MAAP,EAAe;AACb,YAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AAChC,gBAAMA,MAAM,EAAZ;AACD,SAFD,MAEO,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AACrC,gBAAML,YAAY,CAACK,MAAD,CAAlB;AACD;;AAEDA,QAAAA,MAAM,GAAGW,OAAO,CAACG,KAAR,EAAT;AACD;AACF,KAdD;;AAgBAD,IAAAA,GAAG;AACJ,GAlBQ,EAkBNH,IAlBM,CAAT;AAmBD","sourcesContent":["import { useEffect, useMemo } from 'react';\n\nasync function scriptLoader (src): Promise<any> {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement('script');\n    \n    script.type = 'module';\n    script.src = src;\n\n    script.onload = () => resolve(src);\n    script.onerror = (error) => reject(error);\n    script.src = src;\n\n    document.head.appendChild(script);\n  });\n}\n\nexport function useScript (src: string | Function, deps = []) {\n  const scripts: any[] = useMemo(() => [], []);\n\n  scripts.push(src);\n\n  useEffect(() => {\n    const run = async () => {\n      let script = scripts.shift();\n\n      debugger;\n      \n      while (script) {\n        if (typeof script === 'function') {\n          await script();\n        } else if (typeof script === 'string') {\n          await scriptLoader(script);\n        }\n\n        script = scripts.shift();\n      }\n    }\n\n    run();\n  }, deps);\n}"]},"metadata":{},"sourceType":"module"}