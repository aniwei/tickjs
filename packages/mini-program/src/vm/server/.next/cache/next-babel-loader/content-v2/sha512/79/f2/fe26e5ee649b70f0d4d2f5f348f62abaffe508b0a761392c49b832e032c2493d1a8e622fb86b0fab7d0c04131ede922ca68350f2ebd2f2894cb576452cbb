{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aniwei/Desktop/tickjs/packages/mini-program/src/vm/server/componnets/MiniProgram/index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport { UIService } from '../UIService';\nimport { useMessage } from '../../hooks/useMessage';\nexport function UsingMessage(props) {\n  const {\n    invokeHandler\n  } = props;\n  useMessage('service.getSystemInfo', invokeHandler);\n  return null;\n}\nexport class MiniProgram extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"service\", void 0);\n\n    _defineProperty(this, \"invokeHandler\", event => {\n      const {\n        callbackId\n      } = event.detail;\n      this.service.invokeCallbackHandler(_objectSpread({\n        errMsg: 'getSystemInfo:ok'\n      }, $$miniProgram.system));\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(UsingMessage, {\n        invokeHandler: this.invokeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UIService, {\n        ref: ref => this.service = ref\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/aniwei/Desktop/tickjs/packages/mini-program/src/vm/server/componnets/MiniProgram/index.tsx"],"names":["Component","UIService","useMessage","UsingMessage","props","invokeHandler","MiniProgram","event","callbackId","detail","service","invokeCallbackHandler","errMsg","$$miniProgram","system","render","ref"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,UAAT,QAA2B,wBAA3B;AAGA,OAAO,SAASC,YAAT,CAAuBC,KAAvB,EAA8B;AACnC,QAAM;AAAEC,IAAAA;AAAF,MAAoBD,KAA1B;AACAF,EAAAA,UAAU,CAAC,uBAAD,EAA0BG,aAA1B,CAAV;AAEA,SAAO,IAAP;AACD;AAED,OAAO,MAAMC,WAAN,SAA0BN,SAA1B,CAAoC;AAAA;AAAA;;AAAA;;AAAA,2CAGxBO,KAAD,IAAW;AACzB,YAAM;AAAEC,QAAAA;AAAF,UAAiBD,KAAK,CAACE,MAA7B;AACA,WAAKC,OAAL,CAAaC,qBAAb;AACEC,QAAAA,MAAM,EAAE;AADV,SAEKC,aAAa,CAACC,MAFnB;AAID,KATwC;AAAA;;AAWzCC,EAAAA,MAAM,GAAI;AACR,wBACE;AAAA,8BACE,QAAC,YAAD;AACE,QAAA,aAAa,EAAE,KAAKV;AADtB;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,SAAD;AACE,QAAA,GAAG,EAAEW,GAAG,IAAI,KAAKN,OAAL,GAAeM;AAD7B;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AAtBwC","sourcesContent":["import { Component } from 'react';\nimport { UIService } from '../UIService';\nimport { useMessage } from '../../hooks/useMessage';\n\n\nexport function UsingMessage (props) {\n  const { invokeHandler } = props;\n  useMessage('service.getSystemInfo', invokeHandler)\n\n  return null;\n}\n\nexport class MiniProgram extends Component {\n  public service;\n\n  invokeHandler = (event) => {\n    const { callbackId } = event.detail;\n    this.service.invokeCallbackHandler({\n      errMsg: 'getSystemInfo:ok',\n      ...$$miniProgram.system,\n    });\n  }\n\n  render () {\n    return (\n      <div>\n        <UsingMessage \n          invokeHandler={this.invokeHandler} \n        />\n        <UIService \n          ref={ref => this.service = ref} \n        />\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}